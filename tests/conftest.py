from __future__ import annotations

import mchammer as mch
import numpy as np
import pytest
import spindry as spd


@pytest.fixture(
    params=(
        (mch.Atom(id=0, element_string="N"), 0, "N", 1.4882656711484),
        (mch.Atom(id=65, element_string="P"), 65, "P", 1.925513788),
        (mch.Atom(id=2, element_string="C"), 2, "C", 1.60775485914852),
    )
)
def atom_info(request: pytest.FixtureRequest) -> tuple:
    return request.param


@pytest.fixture()
def atoms() -> list:
    return [mch.Atom(0, "C"), mch.Atom(1, "C")]


@pytest.fixture()
def position_matrix() -> np.ndarray:
    return np.array([[0, 0, 0], [0, 1.5, 0]])


@pytest.fixture()
def position_matrix2() -> np.ndarray:
    return np.array([[0, 0, 0], [0, 3, 0]])


@pytest.fixture()
def displaced_position_matrix() -> np.ndarray:
    return np.array([[0, 1, 0], [0, 2.5, 0]])


@pytest.fixture()
def centroid() -> np.ndarray:
    return np.array([0, 0.75, 0])


@pytest.fixture()
def num_atoms() -> int:
    return 2


@pytest.fixture()
def molecule(atoms: list, position_matrix: np.ndarray) -> mch.Molecule:
    return mch.Molecule(atoms=atoms, bonds=[], position_matrix=position_matrix)


@pytest.fixture()
def components(
    atoms: list,
    position_matrix: np.ndarray,
) -> tuple[mch.Molecule]:
    return (
        mch.Molecule(
            atoms=(atoms[0],), bonds=[], position_matrix=position_matrix[0]
        ),
        mch.Molecule(
            atoms=(atoms[1],), bonds=[], position_matrix=position_matrix[1]
        ),
    )


@pytest.fixture()
def smolecule(atoms: list, position_matrix: np.ndarray) -> spd.SupraMolecule:
    return spd.SupraMolecule(
        atoms=atoms,
        bonds=[],
        position_matrix=position_matrix,
    )


@pytest.fixture()
def distances() -> np.ndarray:
    return np.array([1, 1.2, 1.4, 1.6, 1.8, 2.0, 4])


@pytest.fixture()
def nonbond_potentials() -> list[float]:
    return [
        29.650582241279984,
        0.0,
        -1.1965106134640058,
        -0.7315108180046076,
        -0.40042074284821816,
        -0.22239608831999993,
        -0.0036423427949999992,
    ]


@pytest.fixture()
def nb_mins() -> list[int]:
    return [1, 2, 4, 3]


@pytest.fixture()
def final_potential() -> float:
    return -1.0663634766840466


@pytest.fixture()
def final_pos_mat() -> np.ndarray:
    return np.array(
        [
            [-0.25381207, -0.04314638, 0.16139028],
            [-0.26145616, 1.90851203, 0.03076565],
        ]
    )


@pytest.fixture()
def spinner() -> spd.Spinner:
    return spd.Spinner(
        step_size=0.5,
        rotation_step_size=5,
        num_conformers=50,
    )


@pytest.fixture()
def spdpotential() -> spd.SpdPotential:
    return spd.SpdPotential()


@pytest.fixture()
def radii_combinations() -> list[tuple]:
    return [
        (1.24235230881914, 1.24235230881914, 1.24235230881914),
        (1.24235230881914, 2.056812828, 1.64958256840957),
        (1.75038091053539, 1.24235230881914, 1.496366609677265),
        (1.60775485914852, 1.4882656711484, 1.54801026514846),
    ]


@pytest.fixture()
def three_position_matrix() -> np.ndarray:
    return np.array([[0, 0, 0], [0, 1.5, 0], [0, 3.0, 0]])


@pytest.fixture()
def smolecule_components(
    three_position_matrix: np.ndarray,
) -> spd.SupraMolecule:
    return spd.SupraMolecule(
        atoms=[mch.Atom(0, "C"), mch.Atom(1, "C"), mch.Atom(2, "C")],
        bonds=[mch.Bond(0, (0, 1))],
        position_matrix=three_position_matrix,
    )


@pytest.fixture()
def movable_components1() -> tuple:
    return (1,)


@pytest.fixture()
def final_comp_pos_mat1() -> np.ndarray:
    return np.array(
        [
            [0.0, 0.0, 0.0],
            [0.0, 1.5, 0.0],
            [-0.37630376, 4.19120278, 1.01555759],
        ]
    )


@pytest.fixture()
def movable_components2() -> tuple:
    return (0,)


@pytest.fixture()
def final_comp_pos_mat2() -> np.ndarray:
    return np.array(
        [
            [-0.07019955, 0.93799499, -0.22331631],
            [1.06299353, 1.44346439, 0.61952064],
            [0.0, 3.0, 0.0],
        ]
    )


@pytest.fixture()
def spd_spinner() -> spd.Spinner:
    return spd.Spinner(
        step_size=0.0,
        rotation_step_size=0.0,
        num_conformers=1,
    )


@pytest.fixture()
def spd_host() -> mch.Molecule:
    return mch.Molecule(
        atoms=[
            mch.Atom(0, "C"),
            mch.Atom(1, "C"),
            mch.Atom(2, "C"),
            mch.Atom(3, "C"),
            mch.Atom(4, "H"),
            mch.Atom(5, "H"),
            mch.Atom(6, "H"),
            mch.Atom(7, "H"),
            mch.Atom(8, "C"),
            mch.Atom(9, "C"),
            mch.Atom(10, "C"),
            mch.Atom(11, "C"),
            mch.Atom(12, "H"),
            mch.Atom(13, "H"),
            mch.Atom(14, "H"),
            mch.Atom(15, "H"),
            mch.Atom(16, "C"),
            mch.Atom(17, "C"),
            mch.Atom(18, "C"),
            mch.Atom(19, "C"),
            mch.Atom(20, "H"),
            mch.Atom(21, "H"),
            mch.Atom(22, "H"),
            mch.Atom(23, "H"),
            mch.Atom(24, "C"),
            mch.Atom(25, "C"),
            mch.Atom(26, "C"),
            mch.Atom(27, "C"),
            mch.Atom(28, "H"),
            mch.Atom(29, "H"),
            mch.Atom(30, "H"),
            mch.Atom(31, "H"),
            mch.Atom(32, "N"),
            mch.Atom(33, "C"),
            mch.Atom(34, "C"),
            mch.Atom(35, "N"),
            mch.Atom(36, "H"),
            mch.Atom(37, "H"),
            mch.Atom(38, "H"),
            mch.Atom(39, "H"),
            mch.Atom(40, "N"),
            mch.Atom(41, "C"),
            mch.Atom(42, "C"),
            mch.Atom(43, "N"),
            mch.Atom(44, "H"),
            mch.Atom(45, "H"),
            mch.Atom(46, "H"),
            mch.Atom(47, "H"),
            mch.Atom(48, "N"),
            mch.Atom(49, "C"),
            mch.Atom(50, "C"),
            mch.Atom(51, "N"),
            mch.Atom(52, "H"),
            mch.Atom(53, "H"),
            mch.Atom(54, "H"),
            mch.Atom(55, "H"),
            mch.Atom(56, "N"),
            mch.Atom(57, "C"),
            mch.Atom(58, "C"),
            mch.Atom(59, "N"),
            mch.Atom(60, "H"),
            mch.Atom(61, "H"),
            mch.Atom(62, "H"),
            mch.Atom(63, "H"),
            mch.Atom(64, "N"),
            mch.Atom(65, "C"),
            mch.Atom(66, "C"),
            mch.Atom(67, "N"),
            mch.Atom(68, "H"),
            mch.Atom(69, "H"),
            mch.Atom(70, "H"),
            mch.Atom(71, "H"),
            mch.Atom(72, "N"),
            mch.Atom(73, "C"),
            mch.Atom(74, "C"),
            mch.Atom(75, "N"),
            mch.Atom(76, "H"),
            mch.Atom(77, "H"),
            mch.Atom(78, "H"),
            mch.Atom(79, "H"),
        ],
        bonds=[
            mch.Bond(0, (0, 1)),
            mch.Bond(1, (1, 2)),
            mch.Bond(2, (1, 3)),
            mch.Bond(3, (0, 4)),
            mch.Bond(4, (1, 5)),
            mch.Bond(5, (2, 6)),
            mch.Bond(6, (3, 7)),
            mch.Bond(7, (8, 9)),
            mch.Bond(8, (9, 10)),
            mch.Bond(9, (9, 11)),
            mch.Bond(10, (8, 12)),
            mch.Bond(11, (9, 13)),
            mch.Bond(12, (10, 14)),
            mch.Bond(13, (11, 15)),
            mch.Bond(14, (16, 17)),
            mch.Bond(15, (17, 18)),
            mch.Bond(16, (17, 19)),
            mch.Bond(17, (16, 20)),
            mch.Bond(18, (17, 21)),
            mch.Bond(19, (18, 22)),
            mch.Bond(20, (19, 23)),
            mch.Bond(21, (24, 25)),
            mch.Bond(22, (25, 26)),
            mch.Bond(23, (25, 27)),
            mch.Bond(24, (24, 28)),
            mch.Bond(25, (25, 29)),
            mch.Bond(26, (26, 30)),
            mch.Bond(27, (27, 31)),
            mch.Bond(28, (32, 33)),
            mch.Bond(29, (33, 34)),
            mch.Bond(30, (34, 35)),
            mch.Bond(31, (33, 36)),
            mch.Bond(32, (33, 37)),
            mch.Bond(33, (34, 38)),
            mch.Bond(34, (34, 39)),
            mch.Bond(35, (40, 41)),
            mch.Bond(36, (41, 42)),
            mch.Bond(37, (42, 43)),
            mch.Bond(38, (41, 44)),
            mch.Bond(39, (41, 45)),
            mch.Bond(40, (42, 46)),
            mch.Bond(41, (42, 47)),
            mch.Bond(42, (48, 49)),
            mch.Bond(43, (49, 50)),
            mch.Bond(44, (50, 51)),
            mch.Bond(45, (49, 52)),
            mch.Bond(46, (49, 53)),
            mch.Bond(47, (50, 54)),
            mch.Bond(48, (50, 55)),
            mch.Bond(49, (56, 57)),
            mch.Bond(50, (57, 58)),
            mch.Bond(51, (58, 59)),
            mch.Bond(52, (57, 60)),
            mch.Bond(53, (57, 61)),
            mch.Bond(54, (58, 62)),
            mch.Bond(55, (58, 63)),
            mch.Bond(56, (64, 65)),
            mch.Bond(57, (65, 66)),
            mch.Bond(58, (66, 67)),
            mch.Bond(59, (65, 68)),
            mch.Bond(60, (65, 69)),
            mch.Bond(61, (66, 70)),
            mch.Bond(62, (66, 71)),
            mch.Bond(63, (72, 73)),
            mch.Bond(64, (73, 74)),
            mch.Bond(65, (74, 75)),
            mch.Bond(66, (73, 76)),
            mch.Bond(67, (73, 77)),
            mch.Bond(68, (74, 78)),
            mch.Bond(69, (74, 79)),
            mch.Bond(70, (0, 32)),
            mch.Bond(71, (8, 35)),
            mch.Bond(72, (2, 40)),
            mch.Bond(73, (16, 43)),
            mch.Bond(74, (3, 48)),
            mch.Bond(75, (24, 51)),
            mch.Bond(76, (11, 56)),
            mch.Bond(77, (18, 59)),
            mch.Bond(78, (10, 64)),
            mch.Bond(79, (27, 67)),
            mch.Bond(80, (19, 72)),
            mch.Bond(81, (26, 75)),
        ],
        position_matrix=np.array(
            [
                [-1.21343558, -0.70057736, 7.69213325],
                [2.42685976e-03, 1.94621805e-02, 8.15324246e00],
                [1.22892264, -0.71277774, 7.69213325],
                [-0.01548707, 1.4133551, 7.69213325],
                [-1.41064495, -0.8660186, 6.64672197],
                [0.02280699, 0.03282822, 9.26398511],
                [1.37787637, -0.85075855, 6.61583023],
                [0.76960115, 2.12709379, 7.90934627],
                [-6.68507903, -3.85963218, -1.24302308],
                [-6.6458581, -3.85504899, -2.72890357],
                [-6.69212292, -2.44140241, -3.2314489],
                [-5.46459955, -4.57728459, -3.21766127],
                [-5.92702184, -3.37038529, -0.65554213],
                [-7.54505878, -4.37580232, -3.12209223],
                [-5.89298844, -1.75604262, -2.92925666],
                [-5.22987601, -4.70223468, -4.2675471],
                [6.68507903, -3.85963218, -1.24302308],
                [6.66149941, -3.82795745, -2.72890357],
                [5.46037797, -4.57484725, -3.2314489],
                [6.69634451, -2.44383974, -3.21766127],
                [5.8823502, -3.44775883, -0.65554213],
                [7.56208536, -4.34631142, -3.12209223],
                [4.46727174, -4.22545639, -2.92925666],
                [6.6871927, -2.17808814, -4.2675471],
                [-1.09195712e-15, 7.71926435e00, -1.24302308e00],
                [-0.01564131, 7.68300644, -2.72890357],
                [1.23174496, 7.01624966, -3.2314489],
                [-1.23174496, 7.02112433, -3.21766127],
                [0.04467163, 6.81814413, -0.65554213],
                [-0.01702658, 8.72211374, -3.12209223],
                [1.42571671, 5.981499, -2.92925666],
                [-1.45731668, 6.88032283, -4.2675471],
                [-3.21775492, -1.85777167, 4.41909347],
                [-4.60505271, -2.23133287, 4.44210776],
                [-4.92895644, -3.20793096, 3.31523248],
                [-4.68075968, -2.70243786, 2.0300167],
                [-5.24767402, -1.33003012, 4.36513891],
                [-4.77839882, -2.7830909, 5.39112931],
                [-4.23877398, -4.08314408, 3.48839729],
                [-5.97022685, -3.55165905, 3.42119998],
                [3.22549845, -1.86387186, 4.41909347],
                [4.24245012, -2.87873881, 4.44205382],
                [5.2502856, -2.67101408, 3.31527815],
                [4.68850322, -2.70853806, 2.0300167],
                [3.78300783, -3.88581222, 4.36492447],
                [4.8069164, -2.75321795, 5.39113233],
                [5.66335183, -1.6357989, 3.48860364],
                [6.06843997, -3.40109859, 3.42121315],
                [-0.00774353, 3.72164353, 4.41909347],
                [0.36080299, 5.110277, 4.44240314],
                [-0.32297156, 5.87831151, 3.314981],
                [-0.00774353, 5.41097592, 2.0300167],
                [1.46260548, 5.21739821, 4.3663155],
                [-0.03160086, 5.53583503, 5.39111136],
                [-1.42597593, 5.71695497, 3.48726364],
                [-0.10131289, 6.95219362, 3.42112628],
                [-1.46511556, -4.57606592, -3.22455508],
                [-0.68241992, -5.30027032, -4.18766895],
                [0.68154134, -5.67545576, -3.61552307],
                [1.46089397, -4.57606592, -3.22455508],
                [-0.55844816, -4.69992175, -5.11257197],
                [-1.21134089, -6.25780459, -4.38387911],
                [0.44771391, -6.2856895, -2.69613446],
                [1.2148802, -6.31362055, -4.33796167],
                [-4.69343632, 1.02286167, -3.22455508],
                [-5.2985468, 2.27600144, -3.58254223],
                [-4.25926177, 3.25093675, -4.12833808],
                [-3.23043156, 3.55686025, -3.22455508],
                [-5.81595578, 2.71787791, -2.70603431],
                [-6.00199805, 2.07139388, -4.41825737],
                [-3.80415788, 2.71818173, -5.01229987],
                [-4.76770127, 4.1603311, -4.48626736],
                [4.69554711, 1.01920567, -3.22455508],
                [4.9313787, 2.05914217, -4.18766895],
                [4.5743182, 3.42795999, -3.61552307],
                [3.23254235, 3.55320425, -3.22455508],
                [4.34947571, 1.86633058, -5.11257197],
                [6.02508819, 2.07985031, -4.38387911],
                [5.21970983, 3.53057636, -2.69613446],
                [4.86031569, 4.20892739, -4.33796167],
            ]
        ),
    )


@pytest.fixture()
def spd_guest() -> mch.Molecule:
    return mch.Molecule(
        atoms=[
            mch.Atom(0, "C"),
            mch.Atom(1, "C"),
            mch.Atom(2, "C"),
            mch.Atom(3, "C"),
            mch.Atom(4, "C"),
            mch.Atom(5, "C"),
            mch.Atom(6, "H"),
            mch.Atom(7, "H"),
            mch.Atom(8, "H"),
            mch.Atom(9, "H"),
            mch.Atom(10, "H"),
            mch.Atom(11, "H"),
            mch.Atom(12, "H"),
            mch.Atom(13, "H"),
            mch.Atom(14, "H"),
            mch.Atom(15, "H"),
            mch.Atom(16, "H"),
            mch.Atom(17, "H"),
        ],
        bonds=[
            mch.Bond(0, (0, 1)),
            mch.Bond(1, (1, 2)),
            mch.Bond(2, (2, 3)),
            mch.Bond(3, (3, 4)),
            mch.Bond(4, (4, 5)),
            mch.Bond(5, (5, 0)),
            mch.Bond(6, (0, 6)),
            mch.Bond(7, (0, 7)),
            mch.Bond(8, (1, 8)),
            mch.Bond(9, (1, 9)),
            mch.Bond(10, (2, 10)),
            mch.Bond(11, (2, 11)),
            mch.Bond(12, (3, 12)),
            mch.Bond(13, (3, 13)),
            mch.Bond(14, (4, 14)),
            mch.Bond(15, (4, 15)),
            mch.Bond(16, (5, 16)),
            mch.Bond(17, (5, 17)),
        ],
        position_matrix=np.array(
            [
                [1.44570644, 0.14229963, 0.07490143],
                [0.7515447, -1.18170718, -0.13161563],
                [-0.61661028, -1.2268619, 0.47657842],
                [-1.44311182, -0.11737553, -0.14267809],
                [-0.7728018, 1.19253521, 0.28804699],
                [0.55133113, 1.2388843, -0.47177741],
                [2.35966631, 0.11568122, -0.58776379],
                [1.74945618, 0.31948842, 1.11465486],
                [1.41404033, -1.96364041, 0.27662293],
                [0.65970795, -1.31808092, -1.23759718],
                [-0.58627043, -1.04762011, 1.56081379],
                [-1.03651503, -2.22526061, 0.31362948],
                [-1.38721098, -0.12876077, -1.26012284],
                [-2.48704057, -0.11484575, 0.22426913],
                [-1.40000906, 2.06290665, 0.10124359],
                [-0.52449333, 1.08319673, 1.35684449],
                [1.00649016, 2.2319351, -0.42885663],
                [0.31612009, 0.93722592, -1.52719353],
            ]
        ),
    )


@pytest.fixture()
def spd_supramolecule() -> spd.SupraMolecule:
    return spd.SupraMolecule(
        atoms=[
            mch.Atom(0, "C"),
            mch.Atom(1, "C"),
            mch.Atom(2, "C"),
            mch.Atom(3, "C"),
            mch.Atom(4, "H"),
            mch.Atom(5, "H"),
            mch.Atom(6, "H"),
            mch.Atom(7, "H"),
            mch.Atom(8, "C"),
            mch.Atom(9, "C"),
            mch.Atom(10, "C"),
            mch.Atom(11, "C"),
            mch.Atom(12, "H"),
            mch.Atom(13, "H"),
            mch.Atom(14, "H"),
            mch.Atom(15, "H"),
            mch.Atom(16, "C"),
            mch.Atom(17, "C"),
            mch.Atom(18, "C"),
            mch.Atom(19, "C"),
            mch.Atom(20, "H"),
            mch.Atom(21, "H"),
            mch.Atom(22, "H"),
            mch.Atom(23, "H"),
            mch.Atom(24, "C"),
            mch.Atom(25, "C"),
            mch.Atom(26, "C"),
            mch.Atom(27, "C"),
            mch.Atom(28, "H"),
            mch.Atom(29, "H"),
            mch.Atom(30, "H"),
            mch.Atom(31, "H"),
            mch.Atom(32, "N"),
            mch.Atom(33, "C"),
            mch.Atom(34, "C"),
            mch.Atom(35, "N"),
            mch.Atom(36, "H"),
            mch.Atom(37, "H"),
            mch.Atom(38, "H"),
            mch.Atom(39, "H"),
            mch.Atom(40, "N"),
            mch.Atom(41, "C"),
            mch.Atom(42, "C"),
            mch.Atom(43, "N"),
            mch.Atom(44, "H"),
            mch.Atom(45, "H"),
            mch.Atom(46, "H"),
            mch.Atom(47, "H"),
            mch.Atom(48, "N"),
            mch.Atom(49, "C"),
            mch.Atom(50, "C"),
            mch.Atom(51, "N"),
            mch.Atom(52, "H"),
            mch.Atom(53, "H"),
            mch.Atom(54, "H"),
            mch.Atom(55, "H"),
            mch.Atom(56, "N"),
            mch.Atom(57, "C"),
            mch.Atom(58, "C"),
            mch.Atom(59, "N"),
            mch.Atom(60, "H"),
            mch.Atom(61, "H"),
            mch.Atom(62, "H"),
            mch.Atom(63, "H"),
            mch.Atom(64, "N"),
            mch.Atom(65, "C"),
            mch.Atom(66, "C"),
            mch.Atom(67, "N"),
            mch.Atom(68, "H"),
            mch.Atom(69, "H"),
            mch.Atom(70, "H"),
            mch.Atom(71, "H"),
            mch.Atom(72, "N"),
            mch.Atom(73, "C"),
            mch.Atom(74, "C"),
            mch.Atom(75, "N"),
            mch.Atom(76, "H"),
            mch.Atom(77, "H"),
            mch.Atom(78, "H"),
            mch.Atom(79, "H"),
            mch.Atom(80, "C"),
            mch.Atom(81, "C"),
            mch.Atom(82, "C"),
            mch.Atom(83, "C"),
            mch.Atom(84, "C"),
            mch.Atom(85, "C"),
            mch.Atom(86, "H"),
            mch.Atom(87, "H"),
            mch.Atom(88, "H"),
            mch.Atom(89, "H"),
            mch.Atom(90, "H"),
            mch.Atom(91, "H"),
            mch.Atom(92, "H"),
            mch.Atom(93, "H"),
            mch.Atom(94, "H"),
            mch.Atom(95, "H"),
            mch.Atom(96, "H"),
            mch.Atom(97, "H"),
        ],
        bonds=[
            mch.Bond(0, (0, 1)),
            mch.Bond(1, (1, 2)),
            mch.Bond(2, (1, 3)),
            mch.Bond(3, (0, 4)),
            mch.Bond(4, (1, 5)),
            mch.Bond(5, (2, 6)),
            mch.Bond(6, (3, 7)),
            mch.Bond(7, (8, 9)),
            mch.Bond(8, (9, 10)),
            mch.Bond(9, (9, 11)),
            mch.Bond(10, (8, 12)),
            mch.Bond(11, (9, 13)),
            mch.Bond(12, (10, 14)),
            mch.Bond(13, (11, 15)),
            mch.Bond(14, (16, 17)),
            mch.Bond(15, (17, 18)),
            mch.Bond(16, (17, 19)),
            mch.Bond(17, (16, 20)),
            mch.Bond(18, (17, 21)),
            mch.Bond(19, (18, 22)),
            mch.Bond(20, (19, 23)),
            mch.Bond(21, (24, 25)),
            mch.Bond(22, (25, 26)),
            mch.Bond(23, (25, 27)),
            mch.Bond(24, (24, 28)),
            mch.Bond(25, (25, 29)),
            mch.Bond(26, (26, 30)),
            mch.Bond(27, (27, 31)),
            mch.Bond(28, (32, 33)),
            mch.Bond(29, (33, 34)),
            mch.Bond(30, (34, 35)),
            mch.Bond(31, (33, 36)),
            mch.Bond(32, (33, 37)),
            mch.Bond(33, (34, 38)),
            mch.Bond(34, (34, 39)),
            mch.Bond(35, (40, 41)),
            mch.Bond(36, (41, 42)),
            mch.Bond(37, (42, 43)),
            mch.Bond(38, (41, 44)),
            mch.Bond(39, (41, 45)),
            mch.Bond(40, (42, 46)),
            mch.Bond(41, (42, 47)),
            mch.Bond(42, (48, 49)),
            mch.Bond(43, (49, 50)),
            mch.Bond(44, (50, 51)),
            mch.Bond(45, (49, 52)),
            mch.Bond(46, (49, 53)),
            mch.Bond(47, (50, 54)),
            mch.Bond(48, (50, 55)),
            mch.Bond(49, (56, 57)),
            mch.Bond(50, (57, 58)),
            mch.Bond(51, (58, 59)),
            mch.Bond(52, (57, 60)),
            mch.Bond(53, (57, 61)),
            mch.Bond(54, (58, 62)),
            mch.Bond(55, (58, 63)),
            mch.Bond(56, (64, 65)),
            mch.Bond(57, (65, 66)),
            mch.Bond(58, (66, 67)),
            mch.Bond(59, (65, 68)),
            mch.Bond(60, (65, 69)),
            mch.Bond(61, (66, 70)),
            mch.Bond(62, (66, 71)),
            mch.Bond(63, (72, 73)),
            mch.Bond(64, (73, 74)),
            mch.Bond(65, (74, 75)),
            mch.Bond(66, (73, 76)),
            mch.Bond(67, (73, 77)),
            mch.Bond(68, (74, 78)),
            mch.Bond(69, (74, 79)),
            mch.Bond(70, (0, 32)),
            mch.Bond(71, (8, 35)),
            mch.Bond(72, (2, 40)),
            mch.Bond(73, (16, 43)),
            mch.Bond(74, (3, 48)),
            mch.Bond(75, (24, 51)),
            mch.Bond(76, (11, 56)),
            mch.Bond(77, (18, 59)),
            mch.Bond(78, (10, 64)),
            mch.Bond(79, (27, 67)),
            mch.Bond(80, (19, 72)),
            mch.Bond(81, (26, 75)),
            mch.Bond(82, (80, 81)),
            mch.Bond(83, (81, 82)),
            mch.Bond(84, (82, 83)),
            mch.Bond(85, (83, 84)),
            mch.Bond(86, (84, 85)),
            mch.Bond(87, (85, 80)),
            mch.Bond(88, (80, 86)),
            mch.Bond(89, (80, 87)),
            mch.Bond(90, (81, 88)),
            mch.Bond(91, (81, 89)),
            mch.Bond(92, (82, 90)),
            mch.Bond(93, (82, 91)),
            mch.Bond(94, (83, 92)),
            mch.Bond(95, (83, 93)),
            mch.Bond(96, (84, 94)),
            mch.Bond(97, (84, 95)),
            mch.Bond(98, (85, 96)),
            mch.Bond(99, (85, 97)),
        ],
        position_matrix=np.array(
            [
                [-1.22160525, -0.70427056, 7.72028956],
                [-5.74281321e-03, 1.57689801e-02, 8.18139877e00],
                [1.22075297, -0.71647094, 7.72028956],
                [-0.02365674, 1.4096619, 7.72028956],
                [-1.41881462, -0.8697118, 6.67487828],
                [0.01463732, 0.02913502, 9.29214141],
                [1.3697067, -0.85445175, 6.64398654],
                [0.76143148, 2.12340059, 7.93750257],
                [-6.6932487, -3.86332538, -1.21486678],
                [-6.65402777, -3.85874219, -2.70074726],
                [-6.7002926, -2.44509561, -3.2032926],
                [-5.47276923, -4.58097779, -3.18950496],
                [-5.93519151, -3.37407849, -0.62738582],
                [-7.55322846, -4.37949552, -3.09393593],
                [-5.90115811, -1.75973582, -2.90110036],
                [-5.23804569, -4.70592788, -4.23939079],
                [6.67690935, -3.86332538, -1.21486678],
                [6.65332974, -3.83165065, -2.70074726],
                [5.4522083, -4.57854045, -3.2032926],
                [6.68817484, -2.44753294, -3.18950496],
                [5.87418053, -3.45145203, -0.62738582],
                [7.55391569, -4.35000462, -3.09393593],
                [4.45910206, -4.22914959, -2.90110036],
                [6.67902302, -2.18178134, -4.23939079],
                [-0.00816967, 7.71557115, -1.21486678],
                [-0.02381099, 7.67931324, -2.70074726],
                [1.22357528, 7.01255646, -3.2032926],
                [-1.23991463, 7.01743113, -3.18950496],
                [0.03650196, 6.81445093, -0.62738582],
                [-0.02519625, 8.71842054, -3.09393593],
                [1.41754703, 5.9778058, -2.90110036],
                [-1.46548636, 6.87662963, -4.23939079],
                [-3.22592459, -1.86146487, 4.44724978],
                [-4.61322238, -2.23502607, 4.47026406],
                [-4.93712611, -3.21162416, 3.34338879],
                [-4.68892936, -2.70613106, 2.058173],
                [-5.25584369, -1.33372332, 4.39329522],
                [-4.7865685, -2.7867841, 5.41928561],
                [-4.24694365, -4.08683728, 3.51655359],
                [-5.97839652, -3.55535225, 3.44935628],
                [3.21732878, -1.86756506, 4.44724978],
                [4.23428044, -2.88243201, 4.47021012],
                [5.24211593, -2.67470728, 3.34343446],
                [4.68033354, -2.71223126, 2.058173],
                [3.77483816, -3.88950542, 4.39308078],
                [4.79874673, -2.75691115, 5.41928864],
                [5.65518215, -1.6394921, 3.51675994],
                [6.06027029, -3.40479179, 3.44936946],
                [-0.01591321, 3.71795033, 4.44724978],
                [0.35263332, 5.1065838, 4.47055945],
                [-0.33114123, 5.87461831, 3.3431373],
                [-0.01591321, 5.40728272, 2.058173],
                [1.4544358, 5.21370501, 4.39447181],
                [-0.03977053, 5.53214183, 5.41926766],
                [-1.4341456, 5.71326177, 3.51541995],
                [-0.10948256, 6.94850042, 3.44928259],
                [-1.47328523, -4.57975912, -3.19639878],
                [-0.69058959, -5.30396352, -4.15951264],
                [0.67337167, -5.67914896, -3.58736676],
                [1.4527243, -4.57975912, -3.19639878],
                [-0.56661783, -4.70361495, -5.08441566],
                [-1.21951056, -6.26149779, -4.35572281],
                [0.43954423, -6.2893827, -2.66797815],
                [1.20671053, -6.31731375, -4.30980536],
                [-4.701606, 1.01916847, -3.19639878],
                [-5.30671647, 2.27230824, -3.55438593],
                [-4.26743145, 3.24724355, -4.10018178],
                [-3.23860123, 3.55316705, -3.19639878],
                [-5.82412545, 2.71418471, -2.67787801],
                [-6.01016772, 2.06770068, -4.39010107],
                [-3.81232756, 2.71448853, -4.98414356],
                [-4.77587094, 4.1566379, -4.45811105],
                [4.68737744, 1.01551247, -3.19639878],
                [4.92320903, 2.05544897, -4.15951264],
                [4.56614853, 3.42426679, -3.58736676],
                [3.22437268, 3.54951105, -3.19639878],
                [4.34130604, 1.86263738, -5.08441566],
                [6.01691852, 2.07615711, -4.35572281],
                [5.21154016, 3.52688316, -2.66797815],
                [4.85214601, 4.20523419, -4.30980536],
                [2.44570644, 0.14229963, 0.07490143],
                [1.7515447, -1.18170718, -0.13161563],
                [0.38338972, -1.2268619, 0.47657842],
                [-0.44311182, -0.11737553, -0.14267809],
                [0.2271982, 1.19253521, 0.28804699],
                [1.55133113, 1.2388843, -0.47177741],
                [3.35966631, 0.11568122, -0.58776379],
                [2.74945618, 0.31948842, 1.11465486],
                [2.41404033, -1.96364041, 0.27662293],
                [1.65970795, -1.31808092, -1.23759718],
                [0.41372957, -1.04762011, 1.56081379],
                [-0.03651503, -2.22526061, 0.31362948],
                [-0.38721098, -0.12876077, -1.26012284],
                [-1.48704057, -0.11484575, 0.22426913],
                [-0.40000906, 2.06290665, 0.10124359],
                [0.47550667, 1.08319673, 1.35684449],
                [2.00649016, 2.2319351, -0.42885663],
                [1.31612009, 0.93722592, -1.52719353],
            ]
        ),
    )


@pytest.fixture()
def spd_supramolecule_by_comp(
    spd_host: mch.Molecule,
    spd_guest: mch.Molecule,
) -> spd.SupraMolecule:
    return spd.SupraMolecule.init_from_components(
        components=(spd_host, spd_guest),
    )
