import pytest
import numpy as np
import spindry as spd


@pytest.fixture(
    params=(
        (spd.Atom(id=0, element_string='N'), 0, 'N', 1.4882656711484),
        (spd.Atom(id=65, element_string='P'), 65, 'P', 1.925513788),
        (spd.Atom(id=2, element_string='C'), 2, 'C', 1.60775485914852),
    )
)
def atom_info(request):
    return request.param


@pytest.fixture(
    params=(
        (spd.Bond(id=0, atom_ids=(0, 1)), 0, 0, 1),
        (spd.Bond(id=65, atom_ids=(2, 3)), 65, 2, 3),
        (spd.Bond(id=2, atom_ids=(3, 4)), 2, 3, 4),
        (spd.Bond(id=3, atom_ids=(0, 9)), 3, 0, 9),
    )
)
def bond_info(request):
    return request.param


@pytest.fixture
def atoms():
    return [spd.Atom(0, 'C'), spd.Atom(1, 'C')]


@pytest.fixture
def position_matrix():
    return np.array([[0, 0, 0], [0, 1.5, 0]])


@pytest.fixture
def position_matrix2():
    return np.array([[0, 0, 0], [0, 3, 0]])


@pytest.fixture
def displacement():
    return np.array([0, 1, 0])


@pytest.fixture
def displaced_position_matrix():
    return np.array([[0, 1, 0], [0, 2.5, 0]])


@pytest.fixture
def centroid():
    return np.array([0, 0.75, 0])


@pytest.fixture
def num_atoms():
    return 2


@pytest.fixture
def molecule(atoms, position_matrix):
    return spd.Molecule(
        atoms=atoms,
        bonds=[],
        position_matrix=position_matrix
    )


@pytest.fixture
def components(atoms, position_matrix):
    return (
        spd.Molecule(
            atoms=(atoms[0], ),
            bonds=[],
            position_matrix=position_matrix[0]
        ),
        spd.Molecule(
            atoms=(atoms[1], ),
            bonds=[],
            position_matrix=position_matrix[1]
        ),
    )


@pytest.fixture
def smolecule(atoms, position_matrix):
    return spd.SupraMolecule(
        atoms=atoms,
        bonds=[],
        position_matrix=position_matrix,
    )


@pytest.fixture
def distances():
    return np.array([1, 1.2, 1.4, 1.6, 1.8, 2.0, 4])


@pytest.fixture
def nonbond_potentials():
    return [
        29.650582241279984, 0.0, -1.1965106134640058,
        -0.7315108180046076, -0.40042074284821816,
        -0.22239608831999993, -0.0036423427949999992
    ]


@pytest.fixture
def nb_mins():
    return [1, 2, 4, 3]


@pytest.fixture
def final_potential():
    return -0.04786452927586137


@pytest.fixture
def final_pos_mat():
    return np.array([
        [-0.19613681, -0.52185641, -0.26907745],
        [ 1.31683193,  2.57903968,  0.21028248]
    ])


@pytest.fixture
def spinner():
    return spd.Spinner(
        step_size=0.5,
        rotation_step_size=5,
        num_conformers=50,
    )


@pytest.fixture
def spdpotential():
    return spd.SpdPotential()


@pytest.fixture
def radii_combinations():
    return [
        (1.24235230881914, 1.24235230881914, 1.24235230881914),
        (1.24235230881914, 2.056812828, 1.64958256840957),
        (1.75038091053539, 1.24235230881914, 1.496366609677265),
        (1.60775485914852, 1.4882656711484, 1.54801026514846),
    ]


@pytest.fixture
def three_position_matrix():
    return np.array([
        [0, 0, 0],
        [0, 1.5, 0],
        [0, 3.0, 0]
    ])


@pytest.fixture
def smolecule_components(three_position_matrix):
    return spd.SupraMolecule(
        atoms=[spd.Atom(0, 'C'), spd.Atom(1, 'C'), spd.Atom(2, 'C')],
        bonds=[spd.Bond(0, (0, 1))],
        position_matrix=three_position_matrix,
    )


@pytest.fixture
def movable_components1():
    return (1, )


@pytest.fixture
def final_comp_pos_mat1():
    return np.array([
        [0, 0, 0],
        [0., 1.5, 0.],
        [0.59476412,  4.20474898, -1.24371808],
    ])


@pytest.fixture
def movable_components2():
    return (0, )


@pytest.fixture
def final_comp_pos_mat2():
    return np.array([
        [1.04061245,  0.44756825, -0.78994905],
        [-0.04983144,  1.15362244, -0.04000266],
        [0, 3.0, 0],
    ])



@pytest.fixture
def spd_spinner():
    return spd.Spinner(
        step_size=0.0,
        rotation_step_size=0.0,
        num_conformers=1,
    )


@pytest.fixture
def spd_host():
    return spd.Molecule(
        atoms= [
            spd.Atom(0, 'C'), spd.Atom(1, 'C'), spd.Atom(2, 'C'),
            spd.Atom(3, 'C'), spd.Atom(4, 'H'), spd.Atom(5, 'H'),
            spd.Atom(6, 'H'), spd.Atom(7, 'H'), spd.Atom(8, 'C'),
            spd.Atom(9, 'C'), spd.Atom(10, 'C'), spd.Atom(11, 'C'),
            spd.Atom(12, 'H'), spd.Atom(13, 'H'), spd.Atom(14, 'H'),
            spd.Atom(15, 'H'), spd.Atom(16, 'C'), spd.Atom(17, 'C'),
            spd.Atom(18, 'C'), spd.Atom(19, 'C'), spd.Atom(20, 'H'),
            spd.Atom(21, 'H'), spd.Atom(22, 'H'), spd.Atom(23, 'H'),
            spd.Atom(24, 'C'), spd.Atom(25, 'C'), spd.Atom(26, 'C'),
            spd.Atom(27, 'C'), spd.Atom(28, 'H'), spd.Atom(29, 'H'),
            spd.Atom(30, 'H'), spd.Atom(31, 'H'), spd.Atom(32, 'N'),
            spd.Atom(33, 'C'), spd.Atom(34, 'C'), spd.Atom(35, 'N'),
            spd.Atom(36, 'H'), spd.Atom(37, 'H'), spd.Atom(38, 'H'),
            spd.Atom(39, 'H'), spd.Atom(40, 'N'), spd.Atom(41, 'C'),
            spd.Atom(42, 'C'), spd.Atom(43, 'N'), spd.Atom(44, 'H'),
            spd.Atom(45, 'H'), spd.Atom(46, 'H'), spd.Atom(47, 'H'),
            spd.Atom(48, 'N'), spd.Atom(49, 'C'), spd.Atom(50, 'C'),
            spd.Atom(51, 'N'), spd.Atom(52, 'H'), spd.Atom(53, 'H'),
            spd.Atom(54, 'H'), spd.Atom(55, 'H'), spd.Atom(56, 'N'),
            spd.Atom(57, 'C'), spd.Atom(58, 'C'), spd.Atom(59, 'N'),
            spd.Atom(60, 'H'), spd.Atom(61, 'H'), spd.Atom(62, 'H'),
            spd.Atom(63, 'H'), spd.Atom(64, 'N'), spd.Atom(65, 'C'),
            spd.Atom(66, 'C'), spd.Atom(67, 'N'), spd.Atom(68, 'H'),
            spd.Atom(69, 'H'), spd.Atom(70, 'H'), spd.Atom(71, 'H'),
            spd.Atom(72, 'N'), spd.Atom(73, 'C'), spd.Atom(74, 'C'),
            spd.Atom(75, 'N'), spd.Atom(76, 'H'), spd.Atom(77, 'H'),
            spd.Atom(78, 'H'), spd.Atom(79, 'H'),
        ],
        bonds=[
            spd.Bond(0, (0, 1)), spd.Bond(1, (1, 2)),
            spd.Bond(2, (1, 3)), spd.Bond(3, (0, 4)),
            spd.Bond(4, (1, 5)), spd.Bond(5, (2, 6)),
            spd.Bond(6, (3, 7)), spd.Bond(7, (8, 9)),
            spd.Bond(8, (9, 10)), spd.Bond(9, (9, 11)),
            spd.Bond(10, (8, 12)), spd.Bond(11, (9, 13)),
            spd.Bond(12, (10, 14)), spd.Bond(13, (11, 15)),
            spd.Bond(14, (16, 17)), spd.Bond(15, (17, 18)),
            spd.Bond(16, (17, 19)), spd.Bond(17, (16, 20)),
            spd.Bond(18, (17, 21)), spd.Bond(19, (18, 22)),
            spd.Bond(20, (19, 23)), spd.Bond(21, (24, 25)),
            spd.Bond(22, (25, 26)), spd.Bond(23, (25, 27)),
            spd.Bond(24, (24, 28)), spd.Bond(25, (25, 29)),
            spd.Bond(26, (26, 30)), spd.Bond(27, (27, 31)),
            spd.Bond(28, (32, 33)), spd.Bond(29, (33, 34)),
            spd.Bond(30, (34, 35)), spd.Bond(31, (33, 36)),
            spd.Bond(32, (33, 37)), spd.Bond(33, (34, 38)),
            spd.Bond(34, (34, 39)), spd.Bond(35, (40, 41)),
            spd.Bond(36, (41, 42)), spd.Bond(37, (42, 43)),
            spd.Bond(38, (41, 44)), spd.Bond(39, (41, 45)),
            spd.Bond(40, (42, 46)), spd.Bond(41, (42, 47)),
            spd.Bond(42, (48, 49)), spd.Bond(43, (49, 50)),
            spd.Bond(44, (50, 51)), spd.Bond(45, (49, 52)),
            spd.Bond(46, (49, 53)), spd.Bond(47, (50, 54)),
            spd.Bond(48, (50, 55)), spd.Bond(49, (56, 57)),
            spd.Bond(50, (57, 58)), spd.Bond(51, (58, 59)),
            spd.Bond(52, (57, 60)), spd.Bond(53, (57, 61)),
            spd.Bond(54, (58, 62)), spd.Bond(55, (58, 63)),
            spd.Bond(56, (64, 65)), spd.Bond(57, (65, 66)),
            spd.Bond(58, (66, 67)), spd.Bond(59, (65, 68)),
            spd.Bond(60, (65, 69)), spd.Bond(61, (66, 70)),
            spd.Bond(62, (66, 71)), spd.Bond(63, (72, 73)),
            spd.Bond(64, (73, 74)), spd.Bond(65, (74, 75)),
            spd.Bond(66, (73, 76)), spd.Bond(67, (73, 77)),
            spd.Bond(68, (74, 78)), spd.Bond(69, (74, 79)),
            spd.Bond(70, (0, 32)), spd.Bond(71, (8, 35)),
            spd.Bond(72, (2, 40)), spd.Bond(73, (16, 43)),
            spd.Bond(74, (3, 48)), spd.Bond(75, (24, 51)),
            spd.Bond(76, (11, 56)), spd.Bond(77, (18, 59)),
            spd.Bond(78, (10, 64)), spd.Bond(79, (27, 67)),
            spd.Bond(80, (19, 72)), spd.Bond(81, (26, 75)),
        ],
        position_matrix=np.array([
            [-1.21343558, -0.70057736,  7.69213325],
            [2.42685976e-03, 1.94621805e-02, 8.15324246e+00],
            [ 1.22892264, -0.71277774,  7.69213325],
            [-0.01548707,  1.4133551 ,  7.69213325],
            [-1.41064495, -0.8660186 ,  6.64672197],
            [0.02280699, 0.03282822, 9.26398511],
            [ 1.37787637, -0.85075855,  6.61583023],
            [0.76960115, 2.12709379, 7.90934627],
            [-6.68507903, -3.85963218, -1.24302308],
            [-6.6458581 , -3.85504899, -2.72890357],
            [-6.69212292, -2.44140241, -3.2314489 ],
            [-5.46459955, -4.57728459, -3.21766127],
            [-5.92702184, -3.37038529, -0.65554213],
            [-7.54505878, -4.37580232, -3.12209223],
            [-5.89298844, -1.75604262, -2.92925666],
            [-5.22987601, -4.70223468, -4.2675471 ],
            [ 6.68507903, -3.85963218, -1.24302308],
            [ 6.66149941, -3.82795745, -2.72890357],
            [ 5.46037797, -4.57484725, -3.2314489 ],
            [ 6.69634451, -2.44383974, -3.21766127],
            [ 5.8823502 , -3.44775883, -0.65554213],
            [ 7.56208536, -4.34631142, -3.12209223],
            [ 4.46727174, -4.22545639, -2.92925666],
            [ 6.6871927 , -2.17808814, -4.2675471 ],
            [-1.09195712e-15,  7.71926435e+00, -1.24302308e+00],
            [-0.01564131,  7.68300644, -2.72890357],
            [ 1.23174496,  7.01624966, -3.2314489 ],
            [-1.23174496,  7.02112433, -3.21766127],
            [ 0.04467163,  6.81814413, -0.65554213],
            [-0.01702658,  8.72211374, -3.12209223],
            [ 1.42571671,  5.981499  , -2.92925666],
            [-1.45731668,  6.88032283, -4.2675471 ],
            [-3.21775492, -1.85777167,  4.41909347],
            [-4.60505271, -2.23133287,  4.44210776],
            [-4.92895644, -3.20793096,  3.31523248],
            [-4.68075968, -2.70243786,  2.0300167 ],
            [-5.24767402, -1.33003012,  4.36513891],
            [-4.77839882, -2.7830909 ,  5.39112931],
            [-4.23877398, -4.08314408,  3.48839729],
            [-5.97022685, -3.55165905,  3.42119998],
            [ 3.22549845, -1.86387186,  4.41909347],
            [ 4.24245012, -2.87873881,  4.44205382],
            [ 5.2502856 , -2.67101408,  3.31527815],
            [ 4.68850322, -2.70853806,  2.0300167 ],
            [ 3.78300783, -3.88581222,  4.36492447],
            [ 4.8069164 , -2.75321795,  5.39113233],
            [ 5.66335183, -1.6357989 ,  3.48860364],
            [ 6.06843997, -3.40109859,  3.42121315],
            [-0.00774353,  3.72164353,  4.41909347],
            [0.36080299, 5.110277  , 4.44240314],
            [-0.32297156,  5.87831151,  3.314981  ],
            [-0.00774353,  5.41097592,  2.0300167 ],
            [1.46260548, 5.21739821, 4.3663155 ],
            [-0.03160086,  5.53583503,  5.39111136],
            [-1.42597593,  5.71695497,  3.48726364],
            [-0.10131289,  6.95219362,  3.42112628],
            [-1.46511556, -4.57606592, -3.22455508],
            [-0.68241992, -5.30027032, -4.18766895],
            [ 0.68154134, -5.67545576, -3.61552307],
            [ 1.46089397, -4.57606592, -3.22455508],
            [-0.55844816, -4.69992175, -5.11257197],
            [-1.21134089, -6.25780459, -4.38387911],
            [ 0.44771391, -6.2856895 , -2.69613446],
            [ 1.2148802 , -6.31362055, -4.33796167],
            [-4.69343632,  1.02286167, -3.22455508],
            [-5.2985468 ,  2.27600144, -3.58254223],
            [-4.25926177,  3.25093675, -4.12833808],
            [-3.23043156,  3.55686025, -3.22455508],
            [-5.81595578,  2.71787791, -2.70603431],
            [-6.00199805,  2.07139388, -4.41825737],
            [-3.80415788,  2.71818173, -5.01229987],
            [-4.76770127,  4.1603311 , -4.48626736],
            [ 4.69554711,  1.01920567, -3.22455508],
            [ 4.9313787 ,  2.05914217, -4.18766895],
            [ 4.5743182 ,  3.42795999, -3.61552307],
            [ 3.23254235,  3.55320425, -3.22455508],
            [ 4.34947571,  1.86633058, -5.11257197],
            [ 6.02508819,  2.07985031, -4.38387911],
            [ 5.21970983,  3.53057636, -2.69613446],
            [ 4.86031569,  4.20892739, -4.33796167],
        ]),
    )


@pytest.fixture
def spd_guest():
    return spd.Molecule(
        atoms=[
            spd.Atom(0, 'C'), spd.Atom(1, 'C'), spd.Atom(2, 'C'),
            spd.Atom(3, 'C'), spd.Atom(4, 'C'), spd.Atom(5, 'C'),
            spd.Atom(6, 'H'), spd.Atom(7, 'H'), spd.Atom(8, 'H'),
            spd.Atom(9, 'H'), spd.Atom(10, 'H'), spd.Atom(11, 'H'),
            spd.Atom(12, 'H'), spd.Atom(13, 'H'), spd.Atom(14, 'H'),
            spd.Atom(15, 'H'), spd.Atom(16, 'H'), spd.Atom(17, 'H'),
        ],
        bonds=[
            spd.Bond(0, (0, 1)), spd.Bond(1, (1, 2)),
            spd.Bond(2, (2, 3)), spd.Bond(3, (3, 4)),
            spd.Bond(4, (4, 5)), spd.Bond(5, (5, 0)),
            spd.Bond(6, (0, 6)), spd.Bond(7, (0, 7)),
            spd.Bond(8, (1, 8)), spd.Bond(9, (1, 9)),
            spd.Bond(10, (2, 10)), spd.Bond(11, (2, 11)),
            spd.Bond(12, (3, 12)), spd.Bond(13, (3, 13)),
            spd.Bond(14, (4, 14)), spd.Bond(15, (4, 15)),
            spd.Bond(16, (5, 16)), spd.Bond(17, (5, 17)),
        ],
        position_matrix=np.array([
            [1.44570644, 0.14229963, 0.07490143],
            [ 0.7515447 , -1.18170718, -0.13161563],
            [-0.61661028, -1.2268619 ,  0.47657842],
            [-1.44311182, -0.11737553, -0.14267809],
            [-0.7728018 ,  1.19253521,  0.28804699],
            [ 0.55133113,  1.2388843 , -0.47177741],
            [ 2.35966631,  0.11568122, -0.58776379],
            [1.74945618, 0.31948842, 1.11465486],
            [ 1.41404033, -1.96364041,  0.27662293],
            [ 0.65970795, -1.31808092, -1.23759718],
            [-0.58627043, -1.04762011,  1.56081379],
            [-1.03651503, -2.22526061,  0.31362948],
            [-1.38721098, -0.12876077, -1.26012284],
            [-2.48704057, -0.11484575,  0.22426913],
            [-1.40000906,  2.06290665,  0.10124359],
            [-0.52449333,  1.08319673,  1.35684449],
            [ 1.00649016,  2.2319351 , -0.42885663],
            [ 0.31612009,  0.93722592, -1.52719353],
        ]),
    )


@pytest.fixture
def spd_supramolecule():
    return spd.SupraMolecule(
        atoms=[
            spd.Atom(0, 'C'), spd.Atom(1, 'C'), spd.Atom(2, 'C'),
            spd.Atom(3, 'C'), spd.Atom(4, 'H'), spd.Atom(5, 'H'),
            spd.Atom(6, 'H'), spd.Atom(7, 'H'), spd.Atom(8, 'C'),
            spd.Atom(9, 'C'), spd.Atom(10, 'C'), spd.Atom(11, 'C'),
            spd.Atom(12, 'H'), spd.Atom(13, 'H'), spd.Atom(14, 'H'),
            spd.Atom(15, 'H'), spd.Atom(16, 'C'), spd.Atom(17, 'C'),
            spd.Atom(18, 'C'), spd.Atom(19, 'C'), spd.Atom(20, 'H'),
            spd.Atom(21, 'H'), spd.Atom(22, 'H'), spd.Atom(23, 'H'),
            spd.Atom(24, 'C'), spd.Atom(25, 'C'), spd.Atom(26, 'C'),
            spd.Atom(27, 'C'), spd.Atom(28, 'H'), spd.Atom(29, 'H'),
            spd.Atom(30, 'H'), spd.Atom(31, 'H'), spd.Atom(32, 'N'),
            spd.Atom(33, 'C'), spd.Atom(34, 'C'), spd.Atom(35, 'N'),
            spd.Atom(36, 'H'), spd.Atom(37, 'H'), spd.Atom(38, 'H'),
            spd.Atom(39, 'H'), spd.Atom(40, 'N'), spd.Atom(41, 'C'),
            spd.Atom(42, 'C'), spd.Atom(43, 'N'), spd.Atom(44, 'H'),
            spd.Atom(45, 'H'), spd.Atom(46, 'H'), spd.Atom(47, 'H'),
            spd.Atom(48, 'N'), spd.Atom(49, 'C'), spd.Atom(50, 'C'),
            spd.Atom(51, 'N'), spd.Atom(52, 'H'), spd.Atom(53, 'H'),
            spd.Atom(54, 'H'), spd.Atom(55, 'H'), spd.Atom(56, 'N'),
            spd.Atom(57, 'C'), spd.Atom(58, 'C'), spd.Atom(59, 'N'),
            spd.Atom(60, 'H'), spd.Atom(61, 'H'), spd.Atom(62, 'H'),
            spd.Atom(63, 'H'), spd.Atom(64, 'N'), spd.Atom(65, 'C'),
            spd.Atom(66, 'C'), spd.Atom(67, 'N'), spd.Atom(68, 'H'),
            spd.Atom(69, 'H'), spd.Atom(70, 'H'), spd.Atom(71, 'H'),
            spd.Atom(72, 'N'), spd.Atom(73, 'C'), spd.Atom(74, 'C'),
            spd.Atom(75, 'N'), spd.Atom(76, 'H'), spd.Atom(77, 'H'),
            spd.Atom(78, 'H'), spd.Atom(79, 'H'), spd.Atom(80, 'C'),
            spd.Atom(81, 'C'), spd.Atom(82, 'C'), spd.Atom(83, 'C'),
            spd.Atom(84, 'C'), spd.Atom(85, 'C'), spd.Atom(86, 'H'),
            spd.Atom(87, 'H'), spd.Atom(88, 'H'), spd.Atom(89, 'H'),
            spd.Atom(90, 'H'), spd.Atom(91, 'H'), spd.Atom(92, 'H'),
            spd.Atom(93, 'H'), spd.Atom(94, 'H'), spd.Atom(95, 'H'),
            spd.Atom(96, 'H'), spd.Atom(97, 'H'),
        ],
        bonds=[
            spd.Bond(0, (0, 1)), spd.Bond(1, (1, 2)),
            spd.Bond(2, (1, 3)), spd.Bond(3, (0, 4)),
            spd.Bond(4, (1, 5)), spd.Bond(5, (2, 6)),
            spd.Bond(6, (3, 7)), spd.Bond(7, (8, 9)),
            spd.Bond(8, (9, 10)), spd.Bond(9, (9, 11)),
            spd.Bond(10, (8, 12)), spd.Bond(11, (9, 13)),
            spd.Bond(12, (10, 14)), spd.Bond(13, (11, 15)),
            spd.Bond(14, (16, 17)), spd.Bond(15, (17, 18)),
            spd.Bond(16, (17, 19)), spd.Bond(17, (16, 20)),
            spd.Bond(18, (17, 21)), spd.Bond(19, (18, 22)),
            spd.Bond(20, (19, 23)), spd.Bond(21, (24, 25)),
            spd.Bond(22, (25, 26)), spd.Bond(23, (25, 27)),
            spd.Bond(24, (24, 28)), spd.Bond(25, (25, 29)),
            spd.Bond(26, (26, 30)), spd.Bond(27, (27, 31)),
            spd.Bond(28, (32, 33)), spd.Bond(29, (33, 34)),
            spd.Bond(30, (34, 35)), spd.Bond(31, (33, 36)),
            spd.Bond(32, (33, 37)), spd.Bond(33, (34, 38)),
            spd.Bond(34, (34, 39)), spd.Bond(35, (40, 41)),
            spd.Bond(36, (41, 42)), spd.Bond(37, (42, 43)),
            spd.Bond(38, (41, 44)), spd.Bond(39, (41, 45)),
            spd.Bond(40, (42, 46)), spd.Bond(41, (42, 47)),
            spd.Bond(42, (48, 49)), spd.Bond(43, (49, 50)),
            spd.Bond(44, (50, 51)), spd.Bond(45, (49, 52)),
            spd.Bond(46, (49, 53)), spd.Bond(47, (50, 54)),
            spd.Bond(48, (50, 55)), spd.Bond(49, (56, 57)),
            spd.Bond(50, (57, 58)), spd.Bond(51, (58, 59)),
            spd.Bond(52, (57, 60)), spd.Bond(53, (57, 61)),
            spd.Bond(54, (58, 62)), spd.Bond(55, (58, 63)),
            spd.Bond(56, (64, 65)), spd.Bond(57, (65, 66)),
            spd.Bond(58, (66, 67)), spd.Bond(59, (65, 68)),
            spd.Bond(60, (65, 69)), spd.Bond(61, (66, 70)),
            spd.Bond(62, (66, 71)), spd.Bond(63, (72, 73)),
            spd.Bond(64, (73, 74)), spd.Bond(65, (74, 75)),
            spd.Bond(66, (73, 76)), spd.Bond(67, (73, 77)),
            spd.Bond(68, (74, 78)), spd.Bond(69, (74, 79)),
            spd.Bond(70, (0, 32)), spd.Bond(71, (8, 35)),
            spd.Bond(72, (2, 40)), spd.Bond(73, (16, 43)),
            spd.Bond(74, (3, 48)), spd.Bond(75, (24, 51)),
            spd.Bond(76, (11, 56)), spd.Bond(77, (18, 59)),
            spd.Bond(78, (10, 64)), spd.Bond(79, (27, 67)),
            spd.Bond(80, (19, 72)), spd.Bond(81, (26, 75)),
            spd.Bond(82, (80, 81)), spd.Bond(83, (81, 82)),
            spd.Bond(84, (82, 83)), spd.Bond(85, (83, 84)),
            spd.Bond(86, (84, 85)), spd.Bond(87, (85, 80)),
            spd.Bond(88, (80, 86)), spd.Bond(89, (80, 87)),
            spd.Bond(90, (81, 88)), spd.Bond(91, (81, 89)),
            spd.Bond(92, (82, 90)), spd.Bond(93, (82, 91)),
            spd.Bond(94, (83, 92)), spd.Bond(95, (83, 93)),
            spd.Bond(96, (84, 94)), spd.Bond(97, (84, 95)),
            spd.Bond(98, (85, 96)), spd.Bond(99, (85, 97)),
        ],
        position_matrix=np.array([
            [-1.22160525, -0.70427056,  7.72028956],
            [-5.74281321e-03,  1.57689801e-02,  8.18139877e+00],
            [ 1.22075297, -0.71647094,  7.72028956],
            [-0.02365674,  1.4096619 ,  7.72028956],
            [-1.41881462, -0.8697118 ,  6.67487828],
            [0.01463732, 0.02913502, 9.29214141],
            [ 1.3697067 , -0.85445175,  6.64398654],
            [0.76143148, 2.12340059, 7.93750257],
            [-6.6932487 , -3.86332538, -1.21486678],
            [-6.65402777, -3.85874219, -2.70074726],
            [-6.7002926 , -2.44509561, -3.2032926 ],
            [-5.47276923, -4.58097779, -3.18950496],
            [-5.93519151, -3.37407849, -0.62738582],
            [-7.55322846, -4.37949552, -3.09393593],
            [-5.90115811, -1.75973582, -2.90110036],
            [-5.23804569, -4.70592788, -4.23939079],
            [ 6.67690935, -3.86332538, -1.21486678],
            [ 6.65332974, -3.83165065, -2.70074726],
            [ 5.4522083 , -4.57854045, -3.2032926 ],
            [ 6.68817484, -2.44753294, -3.18950496],
            [ 5.87418053, -3.45145203, -0.62738582],
            [ 7.55391569, -4.35000462, -3.09393593],
            [ 4.45910206, -4.22914959, -2.90110036],
            [ 6.67902302, -2.18178134, -4.23939079],
            [-0.00816967,  7.71557115, -1.21486678],
            [-0.02381099,  7.67931324, -2.70074726],
            [ 1.22357528,  7.01255646, -3.2032926 ],
            [-1.23991463,  7.01743113, -3.18950496],
            [ 0.03650196,  6.81445093, -0.62738582],
            [-0.02519625,  8.71842054, -3.09393593],
            [ 1.41754703,  5.9778058 , -2.90110036],
            [-1.46548636,  6.87662963, -4.23939079],
            [-3.22592459, -1.86146487,  4.44724978],
            [-4.61322238, -2.23502607,  4.47026406],
            [-4.93712611, -3.21162416,  3.34338879],
            [-4.68892936, -2.70613106,  2.058173  ],
            [-5.25584369, -1.33372332,  4.39329522],
            [-4.7865685 , -2.7867841 ,  5.41928561],
            [-4.24694365, -4.08683728,  3.51655359],
            [-5.97839652, -3.55535225,  3.44935628],
            [ 3.21732878, -1.86756506,  4.44724978],
            [ 4.23428044, -2.88243201,  4.47021012],
            [ 5.24211593, -2.67470728,  3.34343446],
            [ 4.68033354, -2.71223126,  2.058173  ],
            [ 3.77483816, -3.88950542,  4.39308078],
            [ 4.79874673, -2.75691115,  5.41928864],
            [ 5.65518215, -1.6394921 ,  3.51675994],
            [ 6.06027029, -3.40479179,  3.44936946],
            [-0.01591321,  3.71795033,  4.44724978],
            [0.35263332, 5.1065838 , 4.47055945],
            [-0.33114123,  5.87461831,  3.3431373 ],
            [-0.01591321,  5.40728272,  2.058173  ],
            [1.4544358 , 5.21370501, 4.39447181],
            [-0.03977053,  5.53214183,  5.41926766],
            [-1.4341456 ,  5.71326177,  3.51541995],
            [-0.10948256,  6.94850042,  3.44928259],
            [-1.47328523, -4.57975912, -3.19639878],
            [-0.69058959, -5.30396352, -4.15951264],
            [ 0.67337167, -5.67914896, -3.58736676],
            [ 1.4527243 , -4.57975912, -3.19639878],
            [-0.56661783, -4.70361495, -5.08441566],
            [-1.21951056, -6.26149779, -4.35572281],
            [ 0.43954423, -6.2893827 , -2.66797815],
            [ 1.20671053, -6.31731375, -4.30980536],
            [-4.701606  ,  1.01916847, -3.19639878],
            [-5.30671647,  2.27230824, -3.55438593],
            [-4.26743145,  3.24724355, -4.10018178],
            [-3.23860123,  3.55316705, -3.19639878],
            [-5.82412545,  2.71418471, -2.67787801],
            [-6.01016772,  2.06770068, -4.39010107],
            [-3.81232756,  2.71448853, -4.98414356],
            [-4.77587094,  4.1566379 , -4.45811105],
            [ 4.68737744,  1.01551247, -3.19639878],
            [ 4.92320903,  2.05544897, -4.15951264],
            [ 4.56614853,  3.42426679, -3.58736676],
            [ 3.22437268,  3.54951105, -3.19639878],
            [ 4.34130604,  1.86263738, -5.08441566],
            [ 6.01691852,  2.07615711, -4.35572281],
            [ 5.21154016,  3.52688316, -2.66797815],
            [ 4.85214601,  4.20523419, -4.30980536],
            [2.44570644, 0.14229963, 0.07490143],
            [ 1.7515447 , -1.18170718, -0.13161563],
            [ 0.38338972, -1.2268619 ,  0.47657842],
            [-0.44311182, -0.11737553, -0.14267809],
            [0.2271982 , 1.19253521, 0.28804699],
            [ 1.55133113,  1.2388843 , -0.47177741],
            [ 3.35966631,  0.11568122, -0.58776379],
            [2.74945618, 0.31948842, 1.11465486],
            [ 2.41404033, -1.96364041,  0.27662293],
            [ 1.65970795, -1.31808092, -1.23759718],
            [ 0.41372957, -1.04762011,  1.56081379],
            [-0.03651503, -2.22526061,  0.31362948],
            [-0.38721098, -0.12876077, -1.26012284],
            [-1.48704057, -0.11484575,  0.22426913],
            [-0.40000906,  2.06290665,  0.10124359],
            [0.47550667, 1.08319673, 1.35684449],
            [ 2.00649016,  2.2319351 , -0.42885663],
            [ 1.31612009,  0.93722592, -1.52719353],
        ]),
    )


@pytest.fixture
def spd_supramolecule_by_comp(spd_host, spd_guest):

    return spd.SupraMolecule.init_from_components(
        components=(spd_host, spd_guest),
    )
